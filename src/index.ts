import './views/styles/reset.css';
import './views/styles/global.css';
import './views/styles/media.css';

import { PageRenderer } from './views/pages/PageRenderer';
import { Header } from './views/components/header';
import { Footer } from './views/components/footer';
import { Error404 } from './views/pages/Error404';
import { StartPage } from './views/pages/startPage';
import { ToyPage, resetFilterOnClick } from './views/pages/toyPage';
import { TreePage } from './views/pages/treePage'
import { RangeSlider } from './services/rangeSlider'

customElements.define("maryanzh-range-slider", RangeSlider);

//текущая страница
let currentPage = 'StartPage';
const historyPageArr: Array<string> = [];

//фцнкция смены класса для новой страницы
function changDataPage(dataPage: string) {
    //получили main
    const page = document.getElementById('main');
    // получили название текущей страницы из data
    let pageName = page.dataset.page;
    historyPageArr.push(pageName);
    page.dataset.page = dataPage;
}

const routes = new Map<string, PageRenderer>([
    ['StartPage', StartPage],
    ['ToyPage', ToyPage],
    ['TreePage', TreePage],
    ['Error404', Error404]
]);

async function router() {
    const header = null || document.getElementById('header');
    const pageContent = null || document.getElementById('main');
    const footer = null || document.getElementById('footer');

    header.innerHTML = await Header.render();
    await Header.after_render();
    footer.innerHTML = await Footer.render();
    await Footer.after_render();

    let page = routes.has(currentPage) ? routes.get(currentPage) : Error404;
    pageContent.innerHTML = await page.render();

    await page.after_render();
    changDataPage(currentPage);
};

async function navToPage (page: string) {
    currentPage = page;
    await router();
};

//добавляем слушатель событий
window.addEventListener('load', windowsOnLoad);
async function windowsOnLoad() {
    await router();
};

export { navToPage, currentPage };

// console.log(`
// Самооценка 188/200:
// Вёрстка страниц приложения и навигация между ними +30
// стартовая страница содержит название приложения и кнопку "Начать игру" или аналогичную. Выполняются требования к вёрстке 
// +8 нет адаптива у правой колонки с настройками
// на странице с ёлкой есть меню с настройками, слоты с добавленными в избранное игрушками, ёлка. Выполняются требования к вёрстке 
// +10
// в header приложения есть навигация, которая позволяет с каждой страницы приложения перейти на две другие страницы 
// +10

// Меню с настройками +50
// У пользователя есть возможность:
// выбрать один из нескольких (минимум 8) фонов 
// +10
// выбрать одну из нескольких (минимум 4) ёлок 
// +10
// включить/отключить падающий снег 
// +10
// включить/отключить новогоднюю музыку 
// +10
// выбранные настройки сохраняются в local storage и отображаются при перезагрузке страницы. Если музыка сохранилась включённой, она начинает играть при первом клике. Есть кнопка сброса настроек, которая очищает local storage +10
// 0 нет

// Гирлянда +40
// Гирлянда Для запуска гирлянды необходимо нажать на лампочку, количество цветов на гирлянде соответсвует выбранным фонарикам.
// При трех вбранных фонариках и выше, цвета лампочек перемешиваются. 
// Гирлянда реализуется средствами css без использования изображений
// Гирлянда на ёлку добавляется динамически средствами JavaScript (на кросс-чеке этот пункт не проверяется)
// У пользователя есть возможность:
// добавить на ёлку мерцающую разноцветную гирлянду
//  +20
// выбрать один из нескольких (минимум 4) цветов лампочек гирлянды или оставить её разноцветной 
// +10
// внешний вид гирлянды соответствует предложенному образцу или является его улучшенной версией
//  +10

// Игрушки в избранном +80
// в слотах находятся игрушки, которые были добавлены в избранное на странице с игрушками 
// +10
// если в избранное не была добавлена ни одна игрушка, в слотах отображаются первые 20 игрушек коллекции исходных данных 
// +10

// игрушки из слотов с игрушками можно перетянуть на ёлку используя drag and drop +10
// +10
// если в процессе перетягивания игрушку отпускают за пределами ёлки, она возвращается в свой слот 
// +10
// повешенные на ёлку игрушки можно перетягивать в пределах ёлки 
// +10

// повешенные на ёлку игрушки можно снимать с ёлки, при этом они возвращаются в свой слот +10
// 0 нет
// возле слота с каждой игрушкой указывается количество игрушек в слоте равное количеству экземпляров игрушки в массиве с исходными данными 
// +10
// когда игрушку "вешают на ёлку" количество игрушек в слоте уменьшается, когда игрушку "снимают с ёлки", количество игрушек в слоте увеличивается, когда все экземпляры игрушки помещаются на ёлку, отображается пустой слот 
// слот специально полупрозрачный, что бы было понятно, какая игрушка закончилась
// +10


// Дополнительный функционал на выбор +20
// есть кнопка "Сохранить" при клике по которой текущее состояние страницы с ёлкой сохраняется в local storage, изображение ёлки с размещёнными на ней игрушками добавляется в секцию "Вы нарядили". При клике по карточкам из этой секции восстанавливается состояние страницы с ёлкой на момент сохранения +10
// 0 нет
// -Если игрушки добавлены не во все слоты, то можно вызвать окно с игшрушками, в нем видно, какие еще игрушки есть, на месте  выбранных, -- пустые слоты.
// пока в разработке возможность добавить в пустые слоты игрушки прямо со страницы елки
// -Можно выбрать раные мелодии. Мелодия проигрывается одна по кругу.
// - Каждый огонек гирлянды мигает с рендомным интервалом
// - Анимация шариков фона на стартовой странице
// - Поле поиска убирается со стартовой страницы и страницы елки, т.к. не имет там смысла
// +10
// `);